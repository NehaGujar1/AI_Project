# -*- coding: utf-8 -*-
"""Earthquake.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vsVlH4YaePSTa6pWOyzwN_5NdwMsQWHm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
# %matplotlib inline
data1 = pd.read_csv('Significant Earthquake Dataset 1900-2023.csv')
data1 = data1.fillna(0)
# data1["Type"]
# # filter = (data1["Type"] == 'earthquake').any()
data1 = data1[data1["Type"] == 'earthquake']
data1.magSource = le.fit_transform(data1.magSource)
data1.MagType = le.fit_transform(data1.MagType)
data1.net = le.fit_transform(data1.net)
data1.locationSource = le.fit_transform(data1.locationSource)
data1.Type = le.fit_transform(data1.Type)
data1 = data1.drop(columns=["Time","Place","ID","Updated","Unnamed: 14","magError","status","Type","locationSource","magSource","net"])
x3 = data1.drop(columns=["Mag"])
y3 = data1["Mag"]
data1.head()
# data1["Type"]
# data1["magSource"]

sns.heatmap(data1.corr())

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x3,y3,test_size=0.2)
from sklearn import tree
md = tree.DecisionTreeRegressor(random_state=42)
# from sklearn.metrics import r2_score
# md = r2_score()
md.fit(x_train,y_train)
md.score(x_test,y_test)
# y_predicted = md.predict(x_test)
# from sklearn.metrics import confusion_matrix
# cm = confusion_matrix(y_test, y_predicted)
# sns.heatmap(cm,annot=True)
# plt.xlabel('Predicted')
# plt.ylabel('Truth')

from xgboost import XGBRegressor
md = XGBRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)

from sklearn.ensemble import RandomForestRegressor
md = RandomForestRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)