# -*- coding: utf-8 -*-
"""Wildfire.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19YCecDDTwbJPaCflr2zHIQxFwVkyDzKb
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
# %matplotlib inline
data1 = pd.read_csv('Algerian_forest_fires_dataset_UPDATE.csv')
# data1["area"].max()
data1 = data1.drop(columns=["month","day","year"])
# data1=data1.dropna()
data1 = data1[data1['Classes  '].notna()]
data1 = data1.replace({'Classes  ': {'fire   ': 1, 'not fire    ': 0, 'not fire     ': 0, 'not fire   ': 0}})
print(data1.columns.tolist())
# data1["Classes  "] = le.fit_transform(data1["Classes  "])
x3 = data1.drop(columns=["Classes  "])
y3 = data1["Classes  "]
data1.head()

myset = set(data1["Classes  "])
print(myset)

sns.heatmap(data1.corr())

from sklearn import linear_model
data1le = data1
# data1le.st = le.fit_transform(data1le.st)
X = x3
Y = y3
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,Y,test_size=0.2)
reg = linear_model.LinearRegression()
reg.fit(x_train,y_train)
print("Linear Classification Accuracy: {:.4f}%".format(reg.score(x_test, y_test) * 100))
# reg.coef_
# reg.intercept_
# reg.predict([[42,43,10]])
reg.score(x_test,y_test)

from sklearn.linear_model import LogisticRegression
md = LogisticRegression()
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x3,y3,test_size=0.2)
# md.fit(x_train, y_train)
# md.predict([[42,43,10]])
# md.score(x_test,y_test)
# md.predict_proba(x_test)
from sklearn import tree
md = tree.DecisionTreeRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)
# from sklearn.svm import SVC
# sv = SVC() #C=> regularization = distance
# sv.fit(x_train,y_train)
# sv.score(x_test,y_test)
# md.predict([[42,43,10]])



from sklearn.svm import SVR
sv = SVR() #C=> regularization = distance
sv.fit(x_train,y_train)
sv.score(x_test,y_test)

from sklearn.ensemble import RandomForestRegressor
md = RandomForestRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)