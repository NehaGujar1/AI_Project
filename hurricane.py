# -*- coding: utf-8 -*-
"""Hurricane.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctpWiHNGmwT-cs2fSrEzlQHCe6MbLI6_
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
# %matplotlib inline
data1 = pd.read_csv('atlantic.csv')
data1 = data1.fillna(0)
data1 = data1.drop(columns=["ID","Name","Date","Time","Event"])
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data1.Status = le.fit_transform(data1.Status)
# filter = (data1["Type"] == 'earthquake').any()
# data1 = data1[data1["Type"] == 'earthquake']
# data1.magSource = le.fit_transform(data1.magSource)
# data1.MagType = le.fit_transform(data1.MagType)
# data1.net = le.fit_transform(data1.net)
# data1.locationSource = le.fit_transform(data1.locationSource)
# data1 = data1.drop(columns=["Time","Place","ID","Updated","Unnamed: 14","magError","horizontalError","depthError","Type","status"])
x3 = data1[["Maximum Wind","Minimum Pressure"]]
y3 = data1["Status"]
# plt.scatter(x3,y3)
data1.head()



sns.heatmap(data1.corr())

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x3,y3,test_size=0.2)
from sklearn import tree
md = tree.DecisionTreeRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)

from sklearn.ensemble import RandomForestClassifier
md = RandomForestClassifier()
md.fit(x_train,y_train)
md.score(x_test,y_test)



from sklearn.linear_model import LogisticRegression
md = LogisticRegression()
md.fit(x_train,y_train)
md.score(x_test,y_test)

data1 = pd.read_csv('pacific.csv')
data1 = data1.fillna(0)
data1 = data1.drop(columns=["ID","Name","Date","Time","Event"])
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data1.Status = le.fit_transform(data1.Status)
# filter = (data1["Type"] == 'earthquake').any()
# data1 = data1[data1["Type"] == 'earthquake']
# data1.magSource = le.fit_transform(data1.magSource)
# data1.MagType = le.fit_transform(data1.MagType)
# data1.net = le.fit_transform(data1.net)
# data1.locationSource = le.fit_transform(data1.locationSource)
# data1 = data1.drop(columns=["Time","Place","ID","Updated","Unnamed: 14","magError","horizontalError","depthError","Type","status"])
x3 = data1[["Maximum Wind","Minimum Pressure"]]
y3 = data1["Status"]
# plt.scatter(x3,y3)
data1.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x3,y3,test_size=0.2)
from sklearn import tree
md = tree.DecisionTreeRegressor()
md.fit(x_train,y_train)
md.score(x_test,y_test)

from sklearn.ensemble import RandomForestClassifier
md = RandomForestClassifier()
md.fit(x_train,y_train)
md.score(x_test,y_test)

from sklearn.linear_model import LogisticRegression
md = LogisticRegression()
md.fit(x_train,y_train)
md.score(x_test,y_test)

import joblib
joblib.dump(md,'Model2')
print("Training and testing complete" )
